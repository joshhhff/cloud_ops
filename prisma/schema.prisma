generator client {
    provider = "prisma-client-js"
    output   = "../lib/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String   @id @default(cuid())
    email      String   @unique
    forename   String?
    surname    String?
    password   String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    recordType String   @default("user")
}

model LocationAddress {
    id           String   @id @default(cuid())
    locationId   String   @unique
    addressLine1 String?
    addressLine2 String?
    addressLine3 String?
    city         String?
    state        String?
    postalCode   String?
    country      String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    recordType   String   @default("location_address")
    location     Location @relation(fields: [locationId], references: [id])
}

model Location {
    id                     String           @id @default(cuid())
    name                   String
    shortName              String?
    type                   String?
    createdAt              DateTime         @default(now())
    updatedAt              DateTime         @updatedAt
    description            String?
    isActive               Boolean          @default(true)
    isFulfillable          Boolean          @default(false)
    parentLocationId       String?
    recordType             String           @default("location")
    addressId              String?          @unique
    businessHours          String?
    defaultCurrency        String?
    defaultInboundCarrier  String?
    defaultOutboundCarrier String?
    lastInventoryCheck     DateTime?
    operationalSince       DateTime?
    taxRegionId            String?
    advancedWmsEnabled     Boolean          @default(false)
    parentLocation         Location?        @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
    childLocations         Location[]       @relation("LocationHierarchy")
    address                LocationAddress?
    zones                  Zone[]
}

model Item {
    id            String         @id @default(cuid())
    name          String
    sku           String
    category      String?        @default("Software")
    brand         String?
    description   String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    recordType    String         @default("item")
    unitCost      Float?
    sellingPrice  Float?
    reorderLevel  Int?
    maxStockLevel BigInt?
    weight        Float?
    dimensions    String?
    supplier      String?
    supplierSku   String?
    isActive      Boolean        @default(true)
    stock         ItemBinStock[]
}

model ItemBinStock {
    id          String   @id @default(cuid())
    binId       String
    itemId      String
    quantity    Int
    lastUpdated DateTime @default(now())
    bin         Bin      @relation(fields: [binId], references: [id])
    item        Item     @relation(fields: [itemId], references: [id])
}

model Bin {
    id          String         @id @default(cuid())
    aisleId     String
    name        String
    code        String         @unique
    description String?
    aisle       Aisle          @relation(fields: [aisleId], references: [id])
    inventory   ItemBinStock[]
}

model Aisle {
    id          String  @id @default(cuid())
    zoneId      String
    name        String
    code        String  @unique
    description String?
    zone        Zone    @relation(fields: [zoneId], references: [id])
    bins        Bin[]
}

model Zone {
    id          String   @id @default(cuid())
    locationId  String
    name        String
    code        String   @unique
    description String?
    aisles      Aisle[]
    location    Location @relation(fields: [locationId], references: [id])
}
